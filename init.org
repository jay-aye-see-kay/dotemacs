#+title: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Core
** Lexical binding
By default all variables are dynamically looked up in one global table. This creates a new environment of variables for each scope (function, let expression, etc) like more modern languages
#+begin_src emacs-lisp
  ;; -*- lexical-binding: t; -*-
#+end_src

** Startup performance
Measure and tweak startup performance.
#+begin_src emacs-lisp
  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 100 1000 1000))

  (defun jdr/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'jdr/display-startup-time)
#+end_src

** Basic UI setup
#+begin_src emacs-lisp
  ;; visual stuff
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
  (set-default 'truncate-lines t)

  ;; base font setup
  (setq font-use-system-font t)
  (set-face-attribute 'default nil :height 110)

  ;; Enable line numbering in `prog-mode'
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
#+end_src

** Package setup
For now let emacs manage it's own plugins, even on nix, as my setup gets more mature I'll bring it let nix manage plugins so it's faster and more deterministic.
#+begin_src emacs-lisp
  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

** Auto-tangle Configuration Files
Auto tangle any org files located in my =.emacs.d= directory, not a perfect hook, but close enough. A modified version of [[https://github.com/daviwil/emacs-from-scratch/blob/master/Emacs.org#auto-tangle-configuration-files][this config in emacs from scratch]].
#+begin_src emacs-lisp
  ;; Automatically tangle our Emacs.org config file when we save it
  (defun jdr/org-babel-tangle ()
    (when (string-equal (file-name-directory buffer-file-name)
                        (file-name-directory user-init-file))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'jdr/org-babel-tangle)))
#+end_src

** Theme
#+begin_src emacs-lisp
  (setq modus-themes-bold-constructs t
        modus-themes-italic-constructs t
        modus-themes-fringes 'subtle
        modus-themes-tabs-accented t
        modus-themes-paren-match '(bold intense)
        modus-themes-prompts '(bold intense)
        modus-themes-completions 'opinionated
        modus-themes-org-blocks 'tinted-background
        modus-themes-scale-headings t
        modus-themes-region '(bg-only)
        modus-themes-headings
        '((1 . (overline background 1.4))
          (2 . (background 1.3))
          (3 . (bold 1.2))
          (t . (semilight 1.1))))
  ;; Load the light theme by default
  (load-theme 'modus-operandi t)
#+end_src

** Keeping =.emacs.d= clean
Use the [[https://github.com/emacscollective/no-littering/blob/master/no-littering.el][no-littering]] package to keep the Emacs configuration folder clean! It knows about a wide variety of variables for built in Emacs features as well as those from community packages so it can be much easier than finding and setting these variables manually.
#+begin_src emacs-lisp
  (use-package no-littering)
  ;; no-littering doesn't set this by default so we must place
  ;; auto save files in the same path as it uses for sessions
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
#+end_src

** Misc other setup stuff
#+begin_src emacs-lisp
  ;; NOTE: The first time you load your configuration on a new machine, you'll
  ;; need to run the following command interactively so that mode line icons
  ;; display correctly:

  ;; M-x all-the-icons-install-fonts
  (use-package all-the-icons)

  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))

  (recentf-mode t)
  (setq recentf-max-saved-items 50)
#+end_src

** Help
#+begin_src emacs-lisp
  (use-package helpful
    :bind
    ([remap describe-command] . helpful-command)
    ([remap describe-key] . helpful-key)
    :config
    (global-set-key (kbd "C-c C-d") #'helpful-at-point))

  ;; modes with variable width font (docs + help)
  (dolist (mode '(help-mode-hook
                  helpful-mode-hook))
    (add-hook mode (lambda () (variable-pitch-mode))))
#+end_src

** Pulse on actions
This pulses on most text changes, at first glance I thought it would be too much but so far I'm really liking it. Even if I end up turning it down or off, it would be awesome to have on while pairing.
#+begin_src emacs-lisp
  (use-package evil-goggles
    :ensure t
    :after evil
    :config
    (evil-goggles-mode)
    (evil-goggles-use-diff-faces))
#+end_src

** Undo system
Use the built in undo-redo system, and the basic =vundo= package to visualise the undo tree.
#+begin_src emacs-lisp
  (use-package vundo
    :config
    (setq vundo-glyph-alist vundo-unicode-symbols))
#+end_src

* Project management stuff
TODO can I ditch =projectile= for =project.el=?
=C-x p p= to open project switcher
#+begin_src emacs-lisp
  ;; 
#+end_src

* Minibuffer completions
Covers minibuffer completions, for completion at point look under the [[*Lsp][lsp section]]
TODO switch company for corfu?
#+begin_src emacs-lisp
  (use-package vertico
    :init
    (vertico-mode)
    (setq vertico-cycle t))

  (use-package marginalia
    :config
    (marginalia-mode 1))

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; Alternatively try `consult-completing-read-multiple'.
    (defun crm-indicator (args)
      (cons (concat "[CRM] " (car args)) (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    (setq read-extended-command-predicate
          #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))

  ;; Optionally use the `orderless' completion style.
  (use-package orderless
    :init
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))

#+end_src

* Keymaps
** Evil core
This section sets up evil behaving enough like vanilla vim for me
#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :custom
    (evil-want-keybinding nil)
    (evil-want-C-u-scroll t)
    (evil-undo-system 'undo-redo)
    (evil-want-Y-yank-to-eol t)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal))

  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  ;; Since I let evil-mode take over C-u for buffer scrolling, I need to re-bind
  ;; the universal-argument command to another key sequence
  (global-set-key (kbd "C-M-u") 'universal-argument)
#+end_src

** Evil extras
All the additional evil packages that are basically required
#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))

  (use-package evil-numbers
    :after evil
    :ensure t
    :config
    (define-key evil-normal-state-map (kbd "C-a") 'evil-numbers/inc-at-pt)
    (define-key evil-normal-state-map (kbd "C-c +") 'evil-numbers/inc-at-pt)
    (define-key evil-normal-state-map (kbd "C-c -") 'evil-numbers/dec-at-pt))

  (use-package evil-org
    :ensure t
    :after org
    :hook (org-mode . (lambda () evil-org-mode))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))

  (use-package evil-surround
    :ensure t
    :after evil
    :config
    (global-evil-surround-mode 1))

  (use-package evil-commentary
    :ensure t
    :after evil
    :config (evil-commentary-mode))
#+end_src

** Evil window movements
Make evil window movements less strict, by default they're only =C-w {h,j,k,l}=, so if you don't let go of =ctrl= fast enough it doesn't work. This also aligns with vim's default behaviour.
#+begin_src emacs-lisp
  (evil-define-key 'normal 'global (kbd "C-w C-h") 'evil-window-left)
  (evil-define-key 'normal 'global (kbd "C-w C-j") 'evil-window-down)
  (evil-define-key 'normal 'global (kbd "C-w C-k") 'evil-window-up)
  (evil-define-key 'normal 'global (kbd "C-w C-l") 'evil-window-right)
#+end_src

** Keymaps
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))

  (use-package general
    :config
    (general-create-definer rune/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")
    (general-create-definer rune/quick-keys
      :keymaps '(normal)
      :prefix ","))

  (rune/leader-keys
    "gs" 'magit-status
    "hf" 'helpful-function
    "hv" 'helpful-variable
    "hk" 'helpful-key)

  ;; setup avy like my hop.nvim setup
  (use-package avy
    :after evil
    :config
    (evil-define-key 'normal 'global "s" 'evil-avy-goto-char)
  )

  (use-package deadgrep)

  ;; quick keymaps from vim
  (evil-define-key 'normal 'global ",b" 'switch-to-buffer)
  (evil-define-key 'normal 'global ",f" 'find-file)
  (evil-define-key 'normal 'global ",o" 'recentf-open-files)
  (evil-define-key 'normal 'global ",a" 'deadgrep)
  (evil-define-key 'normal 'global ",x" 'execute-extended-command)
#+end_src

* Org
** Core
#+begin_src emacs-lisp
  (defun jdr/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1)
    (setq
     ;; Edit settings
     org-auto-align-tags nil
     org-tags-column 0
     org-catch-invisible-edits 'show-and-error
     org-special-ctrl-a/e t
     org-insert-heading-respect-content t

     ;; Org styling
     org-pretty-entities t
     org-ellipsis "…"

     ;; Agenda styling
     org-agenda-block-separator ?─
     org-agenda-time-grid
     '((daily today require-timed)
       (800 1000 1200 1400 1600 1800 2000)
       " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
     org-agenda-current-time-string
     "⭠ now ─────────────────────────────────────────────────")

    ;; override variable pitch fonts selectively
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    )

  (use-package org
    :hook (org-mode . jdr/org-mode-setup)
    :config
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-into-drawer t)
    (setq org-directory "~/Documents/org/")
    (setq org-agenda-files '("~/Documents/org/" "~/Documents/org/logbook"))
    (setq org-archive-location "~/Documents/org/archive")

    (setq org-todo-keywords
          '((sequence
             "TODO(t)" "IN-PROGRESS(p!)" "WAITING(w@/!)"
             "|" "DONE(d!)" "CANCELLED(c!)"
             )))
    )
#+end_src

** Org babel
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (add-to-list
     'org-src-lang-modes '("plantuml" . plantuml))
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (js . t)
       (shell . t)
       (python . t)
       (plantuml . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes))
#+end_src

** Org structured templates
Org Mode’s structure templates feature enables you to quickly insert code blocks into your Org files in combination with org-tempo by typing =<= followed by the template name like =el= or py and then press =TAB=. For example, to insert an empty emacs-lisp block below, you can type =<el= and press =TAB= to expand into such a block.
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    ;; This is needed as of Org 9.2
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("js" . "src js")))
#+end_src

** Max width and center org files
#+begin_src emacs-lisp
  (defun jdr/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . jdr/org-mode-visual-fill))
#+end_src

* Languages
** Lsp
#+begin_src emacs-lisp
  (defun jdr/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . jdr/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-l")  ;; TODO set this up so it's =SPC l=
    :config
    (lsp-enable-which-key-integration t)
    :custom
    ;; TODO why isn't this working?? https://github.com/emacs-lsp/lsp-mode/issues/1223#issuecomment-586674535
    (lsp-signature-auto-activate nil))

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :config
    (define-key evil-normal-state-map (kbd "gh") 'lsp-ui-doc-show)
    :custom
    (lsp-ui-doc-position 'top)) ;; can be top, bottom, or at-point


  ;; Company mode configuration ------------------------------------------------------
  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
           ("<tab>" . company-complete-selection))
          (:map lsp-mode-map
           ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))

  ;; lsp leader keys
  ;; (rune/leader-keys
  ;;     "la" '(projectile--find-file :which-key "code action"))

#+end_src

** Tree sitter
#+begin_src emacs-lisp
  (use-package tree-sitter
    :ensure t
    :hook ((typescript-mode . tree-sitter-hl-mode)
           (typescript-tsx-mode . tree-sitter-hl-mode)))

  (use-package tree-sitter-langs
    :ensure t
    :after tree-sitter
    :config
    (tree-sitter-require 'tsx)
    (add-to-list 'tree-sitter-major-mode-language-alist '(typescript-mode . tsx)))
#+end_src

** Typescript
#+begin_src emacs-lisp
  ;; Langauge configuration ------------------------------------------------------
  (use-package typescript-mode
    :mode "\\.ts\\'\\|\\.tsx\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2))
#+end_src

** Nix
#+begin_src emacs-lisp
  (use-package nix-mode
    :mode "\\.nix\\'")
#+end_src

** PlantUML
Currently only using this in org source blocks, and it's not working yet. But will be nice to have around once it is.
#+begin_src emacs-lisp
  (use-package plantuml-mode)
  (setq plantuml-executable-path "/usr/bin/plantuml")
  (setq org-plantuml-executable-path "/usr/bin/plantuml")
  (setq plantuml-default-exec-mode 'executable)
  (setq org-plantuml-exec-mode 'executable)
#+end_src

* VCS and Magit
#+begin_src emacs-lisp
  (use-package magit
    :commands magit-status)
#+end_src

* Terminals
** TODO setup eshell
** TODO make colorscheme work in light mode, or make vterm buffers dark mode?
** Vterm
Vterm is nice as is
#+begin_src emacs-lisp
  (use-package vterm
    :ensure t)
#+end_src

* Snippets
#+begin_src emacs-lisp
  (use-package yasnippet
    :config
    (yas-global-mode 1)
    (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
  )
#+end_src

