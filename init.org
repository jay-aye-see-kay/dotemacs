#+title: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes


* Core
** Lexical binding
TODO why do we need this?
#+begin_src emacs-lisp
  ;; -*- lexical-binding: t; -*-
#+end_src
** Package setup
For now let emacs manage it's own plugins, even on nix, as my setup gets more mature I'll bring it let nix manage plugins so it's faster and more deterministic.
#+begin_src emacs-lisp
  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

    ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

** Auto-tangle Configuration Files
Auto tangle any org files located in my =.emacs.d= directory, not a perfect hook, but close enough. A modified version of [[https://github.com/daviwil/emacs-from-scratch/blob/master/Emacs.org#auto-tangle-configuration-files][this config in emacs from scratch]].
#+begin_src emacs-lisp
  ;; Automatically tangle our Emacs.org config file when we save it
  (defun jdr/org-babel-tangle-config ()
    (when (string-equal (file-name-directory buffer-file-name)
                        (file-name-directory user-init-file))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'jdr/org-babel-tangle-config)))
#+end_src

** Theme
#+begin_src emacs-lisp
  ;; theme
  (setq modus-themes-mode-line '(accented 3d padded)
        x-underline-at-descent-line t
        modus-themes-bold-constructs t
        modus-themes-italic-constructs t
        modus-themes-fringes 'subtle
        modus-themes-tabs-accented t
        modus-themes-paren-match '(bold intense)
        modus-themes-prompts '(bold intense)
        modus-themes-completions 'opinionated
        modus-themes-org-blocks 'tinted-background
        modus-themes-scale-headings t
        modus-themes-region '(bg-only)
        modus-themes-headings
        '((1 . (overline background 1.4))
          (2 . (background 1.3))
          (3 . (bold 1.2))
          (t . (semilight 1.1))))
  ;; Load the light theme by default
  (load-theme 'modus-operandi t)
#+end_src

** Misc other setup stuff
#+begin_src emacs-lisp
  ;; NOTE: The first time you load your configuration on a new machine, you'll
  ;; need to run the following command interactively so that mode line icons
  ;; display correctly:

  ;; M-x all-the-icons-install-fonts
  (use-package all-the-icons)

  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))

  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  ;; visual stuff
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
  (set-default 'truncate-lines t)

  ;; base font setup 
  (setq font-use-system-font t)
  (set-face-attribute 'default nil :height 110)
  (recentf-mode t)

  (setq user-emacs-directory "~/.cache/emacs")
  (use-package no-littering)
  ;; no-littering doesn't set this by default so we must place
  ;; auto save files in the same path as it uses for sessions
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

  ;; Enable line numbering in `prog-mode'
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)

  ;; modes with variable width font (docs + help)
  (dolist (mode '(help-mode-hook
                  helpful-mode-hook))
    (add-hook mode (lambda () (variable-pitch-mode))))
#+end_src

* Project managements stuff
TODO can I ditch =projectile= for =project.el=?
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (setq
     dashboard-startup-banner 'logo
     dashboard-banner-logo-title nil
     dashboard-set-footer nil
     dashboard-items '((projects  . 5)
                       (recents . 5)
                       (agenda . 5))
     ;; show dashboard in new frames (i.e. when emacs server already running)
     initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
    (dashboard-setup-startup-hook))



  ;; START completions

  ;; replacing with project.el....
  ;; =C-x p p= to open project switcher
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :bind-keymap ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (setq projectile-project-search-path '("nixfiles" "~/code" "~/code/msh"))
    (setq projectile-switch-project-action #'projectile-dired))

#+end_src

* Minibuffer completions
Covers minibuffer completions, for completion at point look under the [[*Lsp][lsp section]]
TODO switch company for corfu?
#+begin_src emacs-lisp
  (use-package vertico
    :init
    (vertico-mode)
    (setq vertico-cycle t))

  (use-package marginalia
    :config
    (marginalia-mode 1))

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; Alternatively try `consult-completing-read-multiple'.
    (defun crm-indicator (args)
      (cons (concat "[CRM] " (car args)) (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    (setq read-extended-command-predicate
          #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))

  ;; Optionally use the `orderless' completion style.
  (use-package orderless
    :init
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))

#+end_src

* Keymaps
** Evil
This section contains everything needed to get evil setup and behaving enough like vanilla vim for me. Only those core keymaps should be in this section, everything else should go it the next section.
#+begin_src emacs-lisp
  (use-package undo-tree
    :init
    (global-undo-tree-mode 1))

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil) ; may not be as good/consistent so turned off TODO is it worth it?
    (setq evil-want-C-u-scroll t)
    (setq evil-undo-system 'undo-tree)
    (setq evil-want-Y-yank-to-eol t)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state) ; emacs convention, reset/return to "normal mode"

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  (use-package evil-numbers
    :after evil
    :config
    (define-key evil-normal-state-map (kbd "C-a") 'evil-numbers/inc-at-pt)
    (define-key evil-normal-state-map (kbd "C-c +") 'evil-numbers/inc-at-pt)
    (define-key evil-normal-state-map (kbd "C-c -") 'evil-numbers/dec-at-pt))

  (use-package evil-org
    :ensure t
    :after org
    :hook (org-mode . (lambda () evil-org-mode))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))

  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode 1))

  (use-package evil-commentary
    :config (evil-commentary-mode))

  (evil-define-key 'normal 'global (kbd "C-s") 'save-buffer)
  (evil-define-key 'normal 'global (kbd "C-h") 'evil-window-left)
  (evil-define-key 'normal 'global (kbd "C-j") 'evil-window-down)
  (evil-define-key 'normal 'global (kbd "C-k") 'evil-window-up)
  (evil-define-key 'normal 'global (kbd "C-l") 'evil-window-right)
  (evil-define-key 'normal 'global (kbd "C-w C-h") 'evil-window-left)
  (evil-define-key 'normal 'global (kbd "C-w C-j") 'evil-window-down)
  (evil-define-key 'normal 'global (kbd "C-w C-k") 'evil-window-up)
  (evil-define-key 'normal 'global (kbd "C-w C-l") 'evil-window-right)
#+end_src

** Core fixes/tweaks
#+begin_src emacs-lisp
  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  ;; Since I let evil-mode take over C-u for buffer scrolling, I need to re-bind
  ;; the universal-argument command to another key sequence
  (global-set-key (kbd "C-M-u") 'universal-argument)
  ;; stop C-<direction> keys doing weird stuff, none of it is very useful to me, and I'm used to vims way
  (global-set-key (kbd "C-h") nil)
  (global-set-key (kbd "C-j") nil)
  (global-set-key (kbd "C-k") nil)
  (global-set-key (kbd "C-l") nil)
#+end_src

** Keymaps
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))

  (use-package general
    :config
    (general-create-definer rune/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")
    (general-create-definer rune/quick-keys
      :keymaps '(normal)
      :prefix ","))

  (rune/leader-keys
    "gs" 'magit-status
    "hf" 'describe-function
    "hv" 'describe-variable
    "hk" 'describe-key)

  (use-package helpful
    :bind
    ([remap describe-command] . helpful-command)
    ([remap describe-key] . helpful-key)
    :config
    (global-set-key (kbd "C-c C-d") #'helpful-at-point))

  ;; setup avy like my hop.nvim setup
  (use-package avy
    :config
    (evil-define-key 'normal 'global "s" 'evil-avy-goto-char)
  )

  (use-package deadgrep)

  ;; quick keymaps from vim
  (evil-define-key 'normal 'global ",b" 'switch-to-buffer)
  (evil-define-key 'normal 'global ",f" 'find-file)
  (evil-define-key 'normal 'global ",o" 'recentf-open-files)
  (evil-define-key 'normal 'global ",a" 'deadgrep)
  (evil-define-key 'normal 'global ",x" 'execute-extended-command)
#+end_src

* Org
#+begin_src emacs-lisp
  (defun jdr/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1)
    (setq
      ;; Edit settings
      org-auto-align-tags nil
      org-tags-column 0
      org-catch-invisible-edits 'show-and-error
      org-special-ctrl-a/e t
      org-insert-heading-respect-content t

      ;; Org styling
      org-pretty-entities t
      org-ellipsis "…"

      ;; Agenda styling
      org-agenda-block-separator ?─
      org-agenda-time-grid
      '((daily today require-timed)
        (800 1000 1200 1400 1600 1800 2000)
        " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
      org-agenda-current-time-string
      "⭠ now ─────────────────────────────────────────────────")

    ;; override variable pitch fonts selectively
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    )

  (use-package org
    :hook (org-mode . jdr/org-mode-setup)
    :config
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-into-drawer t)
    (setq org-directory "~/Documents/org/")
    (setq org-agenda-files '("~/Documents/org/" "~/Documents/org/logbook"))
    (setq org-archive-location "~/Documents/org/archive")

    (setq org-todo-keywords
      '((sequence "TODO(t)" "IN-PROGRESS(p!)" "WAITING(w@/!)" "|" "DONE(d!)" "CANCELLED(c!)")))
    )
#+end_src

* Languages
** Lsp
#+begin_src emacs-lisp
  (defun jdr/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . jdr/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-l")  ;; TODO set this up so it's =SPC l=
    :config
    (lsp-enable-which-key-integration t)
    :custom
    ;; TODO why isn't this working?? https://github.com/emacs-lsp/lsp-mode/issues/1223#issuecomment-586674535
    (lsp-signature-auto-activate nil))

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :config
    (define-key evil-normal-state-map (kbd "gh") 'lsp-ui-doc-show)
    :custom
    (lsp-ui-doc-position 'top)) ;; can be top, bottom, or at-point


  ;; Company mode configuration ------------------------------------------------------
  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
           ("<tab>" . company-complete-selection))
          (:map lsp-mode-map
           ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))

  ;; lsp leader keys
  ;; (rune/leader-keys
  ;;     "la" '(projectile--find-file :which-key "code action"))

#+end_src

** Tree sitter
#+begin_src emacs-lisp
  (use-package tree-sitter
    :ensure t
    :hook ((typescript-mode . tree-sitter-hl-mode)
           (typescript-tsx-mode . tree-sitter-hl-mode)))

  (use-package tree-sitter-langs
    :ensure t
    :after tree-sitter
    :config
    (tree-sitter-require 'tsx)
    (add-to-list 'tree-sitter-major-mode-language-alist '(typescript-mode . tsx)))
#+end_src

** Typescript
#+begin_src emacs-lisp
  ;; Langauge configuration ------------------------------------------------------
  (use-package typescript-mode
    :mode "\\.ts\\'\\|\\.tsx\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2))
#+end_src

** Nix
#+begin_src emacs-lisp
  (use-package nix-mode
    :mode "\\.nix\\'")
#+end_src

* VCS and Magit
#+begin_src emacs-lisp
  (use-package magit
    :commands magit-status)
#+end_src

* Snippets
#+begin_src emacs-lisp
  (use-package yasnippet
    :config
    (yas-global-mode 1)
    (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
  )
#+end_src
